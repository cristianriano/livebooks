# GenStateMachine

## Setup

```elixir
Mix.install([
  {:gen_state_machine, "~> 3.0"}
])
```

## Event Timeout and State Timeout

The following example will start a GenStateMachine that behaves like a ticking clock which:

1. Transition to the `started` event inmendiatly the same way `handle_continue` will behave on GenServers
2. Schedule 2 timeouts. One to send a `stop` event after 2 seconds if there is no state change (`state_timeout`) and a event timeout to `tick` after 1 second (`event_timeout`)
3. The `tick` event will arrive first and cancel the stop `state_timeout` by start ticking and transition to `ticking` state
4. Also it will add again a `state_timeout` after 10 seconds to `stop` while schedule a `tick` event every second that will increase the count and continue scheduling a `tick` event as a timeout
5. Lastly since the state didin't change it will receive the `stop` event from the `state_timeout`

```elixir
defmodule Ticker do
  use GenStateMachine, restart: :temporary

  require Logger

  def start_link(_) do
    GenStateMachine.start_link(__MODULE__, {:initial, %{count: 0}}, id: Ticker)
  end

  def init({state, data}) do
    Logger.info("Init")
    {:ok, state, data, [{:next_event, :internal, :start}]}
  end

  def handle_event(:internal, :start, :initial, data) do
    Logger.info("Start")

    {
      :next_state,
      :started,
      data,
      [
        {:state_timeout, 2_000, :stop},
        {:timeout, 1_000, :tick}
      ]
    }
  end

  def handle_event(:timeout, :tick, :started, data) do
    Logger.info("Now ticking")

    {
      :next_state,
      :ticking,
      increment(data),
      [
        {:state_timeout, 5_000, :stop},
        {:timeout, 1_000, :tick}
      ]
    }
  end

  def handle_event(:timeout, :tick, :ticking, data) do
    Logger.info("Tick #{data.count}")

    {
      :keep_state,
      increment(data),
      [{:timeout, 1_000, :tick}]
    }
  end

  def handle_event({:call, from}, :get_count, :ticking, data) do
    {:keep_state_and_data, [{:reply, from, data.count}]}
  end

  def handle_event(:state_timeout, :stop, _state, _data) do
    Logger.info("Stop")
    Process.exit(self(), :normal)
  end

  defp increment(data) do
    update_in(data, [:count], &(&1 + 1))
  end
end

{:ok, pid} = Ticker.start_link([])
Process.send_after(pid, :stop, 15_000)
pid
```
